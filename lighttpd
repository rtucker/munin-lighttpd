#!/usr/bin/python
#%# family=auto
#%# capabilities=suggest autoconf


"""
Munin plugin to monitor lighttpd statistics
Ryan Tucker <rtucker@gmail.com>, 2009/07/12

To use:
ln -s path_to_this_script /etc/munin/plugins/lighttpd_accesses
ln -s path_to_this_script /etc/munin/plugins/lighttpd_busyservers
ln -s path_to_this_script /etc/munin/plugins/lighttpd_idleservers
ln -s path_to_this_script /etc/munin/plugins/lighttpd_kbytes
ln -s path_to_this_script /etc/munin/plugins/lighttpd_uptime

Also ensure that lighttpd has mod_status enabled and that your
status.status-url is set appropriately.  You can adjust the URL
to check by adding something like this to your munin-node config:

[lighttpd_*]
env.statusurl http://ip/other_status
"""

import os
import sys
import urllib2

STATUS_URL = os.environ.get('statusurl', 'http://127.0.0.1/server-status?auto')
AUTH_TYPE = os.environ.get('auth_type', '')
AUTH_REALM = os.environ.get('auth_realm', '')
AUTH_USER = os.environ.get('auth_user', '')
AUTH_PASSWORD = os.environ.get('auth_password', '')

def print_config(name):
    """Generates and prints a munin config for a given chart."""
    counters = ['accesses', 'kbytes']
    
    #                         title       vert. label         description
    typedict = {'accesses': ['Requests', 'requests / s', 'Requests per second', 'Requests'],
                'kbytes': ['Traffic', 'bytes / s', 'Traffic in bytes per second', 'Bytes transfered'],
                'uptime': ['Uptime', 'seconds', 'Uptime in seconds', 'Uptime'],
                'busyservers': ['Active connections', 'connections', 'Number of active connections', 'Active connections'],
                'idleservers': ['Idle connections', 'connections', 'Number of idle connections', 'Idle connections']}

    print "graph_title %s" % (typedict[name][0])
    print "graph_vlabel %s" % (typedict[name][1])
    print "graph_category lighttpd"
    print "graph_info %s" % (typedict[name][2])
    print "data.label %s" % (typedict[name][3])

    if name in counters:
        print "data.type DERIVE\ndata.min 0"

    if name == 'kbytes':
        print "data.cdef data,8000,*"


def print_status(name, url):
    """Gets lighttpd's status and prints the requested value."""

    statuslist = urllib2.urlopen(url).readlines()
    mappings = {'Total Accesses': 'accesses',
                'Total kBytes': 'kbytes',
                'Uptime': 'uptime',
                'BusyServers': 'busyservers',
                'IdleServers': 'idleservers'}

    for i in statuslist:
        key, value = i.split(':')
        if key in mappings.keys():
            if mappings[key] == name:
                print 'data.value %s' % value.strip()

if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == 'suggest':
            print "accesses\nkbytes\nuptime\nbusyservers\nidleservers"
            sys.exit(0)
        elif  sys.argv[1] == 'autoconf':
            if os.path.exists('/etc/lighttpd'):
                print 'yes'
            else:
                print 'no'
            sys.exit(0)

    try:
        param = os.path.split(sys.argv[0])[-1].split('_')[1]
    except IndexError:
        param = 'accesses'

    if param not in ['accesses', 'kbytes', 'uptime', 'busyservers', 'idleservers']:
        print 'unknown parameter %s' % (param)
        sys.exit(1)

    if len(sys.argv) > 1 and sys.argv[1] == 'config':
        print_config(param)
        sys.exit(0)

    if (AUTH_TYPE == 'basic' or AUTH_TYPE == 'digest'):
        if (AUTH_TYPE == 'basic'):
            auth_handler = urllib2.HTTPBasicAuthHandler()
        else:
            auth_handler = urllib2.HTTPDigestAuthHandler()

        auth_handler.add_password(realm=AUTH_REALM,
                                  uri=STATUS_URL,
                                  user=AUTH_USER,
                                  passwd=AUTH_PASSWORD)

        opener = urllib2.build_opener(auth_handler)
        urllib2.install_opener(opener)

    print_status(param, STATUS_URL)
